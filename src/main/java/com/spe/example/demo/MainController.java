package com.spe.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.servlet.http.HttpServletRequest;

import com.spe.example.demo.User;
import com.spe.example.demo.UserRepository;

@SpringBootApplication

@Controller //@RestController
public class MainController {
    @Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
    }

    @GetMapping("/register")
    public String registerForm(Model model) {
        model.addAttribute("register", new Register());
        return "register";
    }

    @PostMapping("/register")
    public String registerSubmit(@ModelAttribute Register register) {
        User n = new User();
		n.setName(register.getName());
		n.setEmail(register.getEmail());
		userRepository.save(n);
        return "result";
    }

    // Return Users name and email by ID
    @GetMapping("{id}")
    @ResponseBody
    public String show(@PathVariable long id) {
        return "Name: " + (userRepository.findById(id)).getName() + ", Email: " + (userRepository.findById(id)).getEmail() + "";
    }

    // Return all users
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
